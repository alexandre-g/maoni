/*
 * Copyright (c) 2016 Armel Soro
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'java'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

group = 'com.github.alexandre-g'
version = '2.4.3'

final homePath = System.properties['user.home']

/*
 * This is to mark some artifacts (such as Android's) as provided
 * so that we don't get dependency conflicts
 */
configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    provided 'com.google.android:android:4.1.1.4'
}


task generateSourcesJar(type: Jar) {
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

bintray {

    //Attempt to read keystore.properties file, if any first
    final propsFile = new File(homePath.toString() + "/.droid/", "maoni.bintray.properties")

    if (propsFile.exists()) {
        printf("[Bintray] Using properties file located at " + propsFile.absolutePath)
        final props = new Properties()
        props.load(new FileInputStream(propsFile))
        user = props['user']
        key = props['key']
    } else {
        user = ""
        key = ""
    }

    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        name = 'org.rm3l:maoni-common'
        labels = ['maoni', 'android', 'feedback', 'android-lib', 'comments', 'review', 'bug', 'issue']

        //noinspection GroovyAssignabilityCheck
        version {
            name = '2.3.1'
            desc = 'Maoni Common'
            released = new Date()
            vcsTag = '2.3.1'
        }

        publicDownloadNumbers = true

        licenses = ['MIT']
        vcsUrl = 'https://github.com/rm3l/maoni.git'
        websiteUrl = 'https://rm3l.github.io/maoni'
        issueTrackerUrl = 'https://github.com/rm3l/maoni/issues'

    }
    configurations = ['archives']
}
