/*
 * Copyright (c) 2016 Armel Soro
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

final homePath = System.properties['user.home']

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0-rc1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext.getReleaseSigningInfo = {
    android ->
        def storeFile = ""
        def storePassword = ""
        def keyAlias = ""
        def keyPassword = ""

        //Attempt to read keystore.properties file, if any first
        final propsFile = new File(homePath.toString() + "/.droid/", "maoni-keystore.properties")
        final configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            printf("Using properties file located at " + propsFile.absolutePath)
            final props = new Properties()
            props.load(new FileInputStream(propsFile))
            storeFile = new File(props['keystore'].toString())
            storePassword = props['storePassword']
            keyAlias = props['keyAlias']
            keyPassword = props['keyPassword']

        } else if (System.console() == null) {
            storeFile = "UNDEFINED"
            storePassword = "UNDEFINED"
            keyAlias = "UNDEFINED"
            keyPassword = "UNDEFINED"
        } else {
            storeFile = System.console().readLine("\nPlease enter path to keystore file: ")
            storeFile = new File(storeFile)
            storePassword = System.console().readPassword("\nPlease enter the store password: ")
            keyAlias = System.console().readLine("\nPlease enter the key alias: ")
            keyPassword = System.console().readPassword("\nPlease enter the key password: ")
        }

        if (storeFile == null) {
            throw new InvalidUserDataException("Keystore path not specified or file does not exist")
        }

        if (keyAlias.size() <= 0) {
            throw new InvalidUserDataException("You must enter the key alias to proceed.")
        }

        if (storePassword.size() <= 0 || keyPassword.size() <= 0) {
            throw new InvalidUserDataException("You must enter both the store and key passwords to proceed.")
        }

        return [storeFile, storePassword, keyAlias, keyPassword]

}

